Органичное строительство
С тех самых пор, как программирование оформилось в отдельную деятельность и профессию, представители этой профессии и философы всё стремятся понять, какова её природа. Они стремятся найти одну, понятную и всеобъемлющую метафору, из которой бы естественным образом проистекал и процесс организации, и необходимые инструменты, и способ подготовки профессионалов.
Об отсутствии ответа на вопрос "что есть программирование" свидетельствует хотя бы и количество статей с заголовками вроде "Programming is like A", "Programming isn’t like A, programming is B", "Software developer is C", чуть не ежедневно вызывающих горячие дискуссии в техно-блогах.
Самая старая и очевидная метафора - программирование как аналог любой другой инженерной деятельности, строительства дорог, домов и мостов. Недостатки этой метафоры давно известны: все компоненты "моста"-программы суть плод интеллектуальной деятельности, а не объекты физического мира, что подразумевает возможность пере- и доделки виртуального "моста" в любой момент его жизни; сочленение его с другими, существенно разнородными сущностями; повторное использование компонентов. Тем не менее, эта рабочая модель, имеющая мало общего с действительным положением вещей, и по сию пору достаточно часто привлекается в дискуссиях.
Как только стало очевидным несовершенство "строительной" метафоры, стали появляться ее замены-развития, суть которых, в основном, сводится к аналогиям между деятельностью разработчика и инженера-проектировщика: как бы весь цикл написания программы есть проектирование, а процесс "производства" сведён лишь к фазе компиляции. Однако и эта метафора имеет недостатки: она игнорирует тот факт, что почти любой минимально законченный кусочек работы программиста может быть запущен, отлажен, переписан.
Как бы то ни было, почти любая попытка определить деятельность разработчиков ПО приводит к тому или иному компромиссу между производством (production) и творчеством (creation). Соответственным образом выглядит и большинство современных средств разработки: как среда для созидания с множеством возможностей анализа структуры и процесса, а также использования "типовых решений". Но попробуем взглянуть пристальнее на процесс и его результат - на то, что происходит в реальности, а не должно бы происходить в некоем "идеальном процессе разработки". Проект движется от небольших "атомов" (или "клеток"), от отдельных строк кода, к модулям, подсистемам и целому. В процессе этого движения атомы-клетки многократно изменяются под влиянием тестирования, изменений в требованиях к проекту и в команде разработчиков, эффектов, возникающих от сочетания с другими частями. Изменения этих (и множества других условий) приводят к образованию и изменению сложных структур, модулей и подсистем: структуры эти обладают своей логикой и стройностью, но эта логика практически не может быть в точности спланирована заранее. На уровне отдельных функций и объектов программист - царь и бог; на уровне общей цели проекта царь и бог - системный архитектор; но вот сочетание отдельных мельчайших частей в более крупные сущности, направление и скорость роста этих сущностей - все это происходит как бы "само по себе".
Не вызывает ли такое описание аналогий с органической системой, ее моделью жизни и развития?
Возможно, это и есть такая метафора, сполна описывающая процесс разработки нетривиальных программных систем; она представляется вполне полезной "ментальной моделью".
Следует заметить, что взгляд на программный проект как на форму органической жизни, конечно же, не нов (хотя и не слишком распространён). Другое дело, что большинство сторонников "органической метафоры" смотрят на нее, как на нечто, требующее создания новых, особенных языков, технических средств или методологий. Но ведь ценность объемлющей метафоры - именно в "сдвиге точки зрения", а не в разработке новых инструментов и средств (по крайней мере - не в первую очередь).
Манифест органического программирования
1. Исключение - это правило.
2. Наш мир богат и сложен, а не структурирован и прост.
3. Программы должны соответствовать нестандартным, меняющимся проблемам, а не стандартным, статичным паттернам.
4. Программная система - органическое создание, а не набор математических алгоритмов.
5. Программные компоненты - составная часть нашего сложного мира, а не описательные р.
6. Разработка программ эволюционирует от малого к большому, а не от конкретного к абстрактному.
Автор считает пункты 1-3 общим местом, а пункты 4-6 - своим нововведением.